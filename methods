#include <iostream>
#include <cmath>
#include <iomanip>
#include <limits> 
#include <chrono>
#include <vector>
using namespace std;

// ЛАБОРАТНОРАЯ РАБОТА 1
// ЗАДАНИЕ 1
// Функция для вычисления erf через ряд Тейлора
//double func(double x) {
//    const double PI = acos(-1.0);
//    const double first_part = 2.0 / sqrt(PI);
//
//    double full_sum = 0.0; // сумма всех членов ряда
//    double term = x;       // текущий член ряда
//    int n = 0;             // итерация в ряде
//
//    do {
//        full_sum += term; // добавляем текущий член к общей сумме
//        n++;
//        term *= -x * x * (2 * n - 1) / (n * (2 * n + 1)); // обновляем текущий член ряда
//    } while (fabs(term) > 1e-10); // будет выполняться, пока текущий член ряда больше эпсилон
//
//    return first_part * full_sum; // итоговая сумма ряда
//}
//
//int main() {
//    double xs[4] = { 0.5, 1.0, 5.0, 10.0 }; // массив иксов
//
//    // красивый вывод
//    cout << fixed << setprecision(10); // 10 знаков после запятой
//
//
//    cout << setw(8) << "x" << " | "
//        << setw(16) << "(func)" << " | "
//        << setw(16) << "(std::erf)" << " | "
//        << setw(16) << "Difference" << endl;
//
//    cout << string(60, '-') << endl;
//
//
//    for (int i = 0; i < 4; ++i) {
//        double result_func = func(xs[i]);       // результат func 
//        double result_erf = erf(xs[i]);         // Результат erf из стандартной библиотеки
//        double difference = fabs(result_func - result_erf); // Разница между func и erf
//
//        cout << setw(8) << xs[i] << " | "
//            << setw(16) << result_func << " | "
//            << setw(16) << result_erf << " | "
//            << setw(16) << difference << endl;
//    }
//
//    return 0;
//}


// ЗАДАНИЕ 2
// Функция для вычисления суммы ряда phi(x) с заданной точностью - epsilon
//double phi(double x, double epsilon) {
//    double sum = 0.0;  // инициализация суммы ряда
//    double term;       // переменная для хранения текущего члена ряда
//    int k = 1;         // начальное значение индекса k
//
//    // цикл для вычисления суммы ряда до тех пор, пока модуль текущего члена больше epsilon
//    do {
//        term = 1.0 / (k * (k + x));  // вычисление текущего члена ряда
//        sum += term;                 // добавление текущего члена к сумме
//        k++;                         
//    } while (fabs(term) > epsilon);  // проверка условия завершения цикла
//
//    return sum;  
//}
//
//// с использованием соотношения 1/(k*(k+1)) = 1/k - 1/(k+1)
//double phi_1(double epsilon) {
//    double sum = 0.0;  
//    double term;       
//    int k = 1;        
//
//
//    do {
//        term = 1.0 / k - 1.0 / (k + 1);  
//        sum += term;                     
//        k++;                            
//    } while (fabs(term) > epsilon);      
//
//    return sum;  
//}
//
//// для вычисления разности phi(x) - phi(1) с использованием более быстро сходящегося ряда
//double phi_diff(double x, double epsilon) {
//    double sum = 0.0;  
//    double term;       
//    int k = 1;         
//
//    do {
//        term = (1.0 - x) / (k * (k + x) * (k + 1));  //упростили выражение phi(x) - phi(1) 
//        sum += term;                                 
//        k++;                                         
//    } while (fabs(term) > epsilon);                  
//
//    return sum;  
//}
//
//int main() {
//    double epsilon = 0.5e-8;  // допустимая ошибка
//
//    cout << "x from 0.1 to 1" << endl;
//    for (double x = 0.0; x <= 1.0; x += 0.1) {
//        double result = phi(x, epsilon);  
//        cout << "phi(" << x << ") = " << result << endl;  
//    }
//
//    cout << endl << "proof using the ratio:" << endl;
//    double phi_1_result = phi_1(epsilon);
//    cout << "phi(1) = " << phi_1_result << endl << endl;
//
//    cout << "phi(x) - phi(1):" << endl;
//    for (double x = 0.0; x <= 1.0; x += 0.1) {
//        double diff = phi_diff(x, epsilon);
//        cout << "phi(" << x << ") - phi(1) = " << diff << endl;
//    }
//
//    //отклонения связаны с численными погрешностями из-за конечного числа итераций
//}

//ЗАДАНИЕ 3
//сделал

//ЗАДАНИЕ 4
//сделал

//#include <iostream>
//using namespace std;
//
//double factorial(int n) {
//	double answer = 1;
//	for (int i = 1; i <= n; i++) {
//		answer *= i;
//	}
//	return answer;
//}
//
//double PI = 3.14159265358979323846;
//const double first_part = 2 / sqrt(PI); //часть до суммы ряда
//
//int main()
//{
//	double answers[5];
//	double x = 0.5; // начальный х 
//	double full_sum = 0.0; // получаемый ответ
//	int index = 0;
//	while (x <= 10) {
//		for (int n = 0; n < 9; n++) {
//			double first_elem = pow(-1, n);
//			double second_elem = pow(x, ((2 * n) + 1));
//			double third_elem = factorial(n);
//			double fourth_elem = (2 * n) + 1;
//			full_sum += (first_elem * second_elem) / third_elem * fourth_elem;
//		}
//		answers[index] = full_sum * first_part;
//		index++;
//		if (index > 5) break;
//		cin >> x;
//	}
//	for(int i = 0; i<6;i++)
//		cout << answers[i] << endl;
//}

//ЛАБОРАТОРНАЯ 2
// Функция для решения квадратного уравнения
void solveQuadratic(long double a, long double b, long double c) {
    // проверка на случай, когда все коэффициенты равны нулю
    if (a == 0 && b == 0 && c == 0) {
        cout << "Все числа удовлетворяют уравнению" << endl;
        return;
    }

    // Проверка на случай, когда a = 0, b = 0, но c != 0
    if (a == 0 && b == 0 && c != 0) {
        cout << "Ни одно число не удовлетворяет уравнению." << endl;
        return;
    }

    // обработка переполнения и машинных нулей: если коэффициенты слишком большие или маленькие, нормализуем их
    long double scale = max(abs(a), max(abs(b), abs(c)));
    if (scale > numeric_limits<long double>::max() / 10 || scale < numeric_limits<long double>::min() * 10) {
        a /= scale;
        b /= scale;
        c /= scale;
    }

    // если a == 0, уравнение становится линейным
    if (a == 0) {
        if (b != 0) {
            cout << fixed << setprecision(11); // точность до 11 знаков
            cout << "Уравнение линейное. Корень: x = " << -c / b << endl;
        }
        else {
            cout << "Некорректное уравнение." << endl;
        }
        return;
    }

    // вычисление дискриминанта
    long double discriminant = b * b - 4 * a * c;

    // Если чувствительное уравнение
    // Если дискриминант отрицательный, то корни комплексные
    if (discriminant < 0) {
        long double realPart = -b / (2 * a);
        long double imaginaryPart = sqrt(-discriminant) / (2 * a);
        cout << fixed << setprecision(11); // Устанавливаем точность до 11 знаков
        cout << "Корни комплексные: " << endl;
        cout << "x1 = " << realPart << " + " << imaginaryPart << "i" << endl;
        cout << "x2 = " << realPart << " - " << imaginaryPart << "i" << endl;
        return;
    }

    // численно устойчивый способ вычисления корней
    // использование знака b для минимизации потери точности
    long double sqrtDiscriminant = sqrt(discriminant);
    long double x1, x2;

    if (b >= 0) {
        x1 = (-b - sqrtDiscriminant) / (2 * a); // минимизация ошибок округления
        x2 = c / (a * x1); 
    }
    else {
        x1 = (-b + sqrtDiscriminant) / (2 * a); // минимизация ошибок округления
        x2 = c / (a * x1);
    }

    // находятся ли корни в допустимых пределах
    // определение границ для чисел с плавающей точкой
    long double lowerBound = numeric_limits<long double>::min();
    long double upperBound = numeric_limits<long double>::max();

    cout << fixed << setprecision(11); // устанавливаем точность до 11 знаков
    if (abs(x1) < lowerBound || abs(x1) > upperBound) {
        cout << "Корень x1 выходит за пределы допустимого диапазона." << endl;
    }
    else {
        cout << "Корень x1 = " << x1 << endl;
    }

    if (abs(x2) < lowerBound || abs(x2) > upperBound) {
        cout << "Корень x2 выходит за пределы допустимого диапазона." << endl;
    }
    else {
        cout << "Корень x2 = " << x2 << endl;
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    cout << "Введите коэффициенты a, b, c для уравнения ax^2 + bx + c = 0:" << endl;
    long double a, b, c;
    cin >> a >> b >> c;

    solveQuadratic(a, b, c);

    return 0;
}




//ЛАБОРАТОРНАЯ 3
// Функция для вывода всей матрицы 
void printMatrix(const vector<vector<double>>& A, const vector<double>& B) {
    int n = A.size();                                       
    cout << "Система уравнений:\n"; 
    for (int i = 0; i < n; i++) {                          
        for (int j = 0; j < n; j++) {                      
            cout << setw(10) << A[i][j] << " ";             
        }
        cout << "| " << setw(10) << B[i] << endl; 
    }
    cout << endl; 
}

// Функция для решения системы методом Гаусса с выбором ведущего элемента
vector<double> gaussSolve(vector<vector<double>> A, vector<double> B) {
    int n = A.size();                           // Получаем размер матрицы (число строк)

    // Прямой ход метода Гаусса
    for (int k = 0; k < n; k++) {               // Перебираем шаги прямого хода (k — текущий столбец)

        // Выбор ведущего элемента 
        int maxRow = k;                         // индекс строки с максимальным элементом
        for (int i = k + 1; i < n; i++) {       // Перебираем строки ниже текущей

            if (fabs(A[i][k]) > fabs(A[maxRow][k])) {   // сравниваем текущий элемент столбца с максимальным по модулю
                maxRow = i;                             // Обновляем индекс строки с максимальным элементом
            }
        }

        // Перестановка строк для размещения ведущего элемента в позиции (k, k)
        swap(A[k], A[maxRow]);                      // Меняем текущую строку с максимальной
        swap(B[k], B[maxRow]);                      // Меняем соответствующие элементы правой части

        // Проверка на вырожденность матрицы
        // Если ведущий элемент близок к нулю (меньше 1e-9), система несовместна или имеет бесконечно много решений
        if (fabs(A[k][k]) < 1e-9) {
            cerr << "Много решений или несовместима" << endl;
            exit(1); 
        }

        // Преобразование строк для исключения переменной x_k из уравнений ниже
        for (int i = k + 1; i < n; i++) {                   // Перебираем строки ниже текущей

            // Вычисляем множитель для исключения x_k
            double factor = A[i][k] / A[k][k];              // Делим элемент текущей строки на ведущий элемент
            for (int j = k; j < n; j++) {                   // Перебираем элементы строки, начиная с k

                // Вычитаем из текущего элемента строки пропорциональное значение
                A[i][j] -= factor * A[k][j];
            }
            B[i] -= factor * B[k];                          // обновляем правую часть
        }
    }

    // Обратная подстановка для нахождения решения
    vector<double> X(n, 0);                         // Создаем вектор решения
    for (int i = n - 1; i >= 0; i--) {              // Перебираем строки с конца (обратный ход)
        double sum = B[i];                          // Берем правую часть текущего уравнения
        for (int j = i + 1; j < n; j++) {           // Перебираем уже найденные x_j
            sum -= A[i][j] * X[j];                  // Вычитаем вклады уже известных переменных
        }
        X[i] = sum / A[i][i];                       // Находим x_i, деля остаток на диагональный элемент
    }

    return X;                        // вектор решения
}

// Функция для вычисления невязок (разностей между A*X и B)
vector<double> computeResiduals(const vector<vector<double>>& A, const vector<double>& B, const vector<double>& X) {
    int n = A.size();                                       // получаем размер матрицы
    vector<double> residuals(n, 0);                         // создаем вектор невязок

    for (int i = 0; i < n; i++) {                           // перебираем строки матрицы
        double sum = 0;                                     // сумма для i-го уравнения
        for (int j = 0; j < n; j++) {                       // перебираем элементы строки
            sum += A[i][j] * X[j];                          // вычисляем A[i][j] * x_j
        }
        
        residuals[i] = fabs(sum - B[i]);                    // Вычисляем невязку как модуль разности между A*X и B
    }

    return residuals;       // вектор невязок
}

// Функция для вывода решения и невязок
void solveAndPrint(vector<vector<double>> A, vector<double> B, const string& name) {
    cout << "Решение для системы " << name << ":\n"; 
    printMatrix(A, B);

    vector<double> X = gaussSolve(A, B);                    // Решаем систему методом Гаусса

    cout << "Решение системы:\n"; 
    for (int i = 0; i < X.size(); i++) {                    // элементы решения
        cout << "x[" << i + 1 << "] = " << X[i] << endl;    // вывод x_i
    }

    vector<double> residuals = computeResiduals(A, B, X);   // вычисляем невязки
    cout << "\nВектор невязок:\n"; 
    for (int i = 0; i < residuals.size(); i++) {                    // элементы невязки
        cout << "r[" << i + 1 << "] = " << residuals[i] << endl;    // выводи r_i
    }
    cout << "\n\n\n\n";
}

int main() {
    setlocale(LC_ALL, "Russian"); 

    // Система (а)
    vector<vector<double>> A1 = { 
        {1e-4, 1}, 
        {1, 2}     
    };
    vector<double> B1 = { 1, 4 }; 

    // Система (б)
    vector<vector<double>> A2 = { 
        {2.34, -4.21, -11.61}, 
        {8.04, 5.22, 0.27},    
        {3.92, -7.99, 8.37}    
    };
    vector<double> B2 = { 14.41, -6.44, 55.56 }; 

    // Система (в)
    vector<vector<double>> A3 = { 
        {4.43, -7.21, 8.05, 1.23, -2.56},   
        {-1.29, 6.47, 2.96, 3.22, 6.12},   
        {6.12, 8.31, 9.41, 1.78, -2.88},  
        {-2.57, 6.93, -3.74, 7.41, 5.55},  
        {1.46, 3.62, 7.83, 6.25, -2.35}    
    };
    vector<double> B3 = { 2.62, -3.97, -9.12, 8.11, 7.23 }; 

    solveAndPrint(A1, B1, "(a)");
    solveAndPrint(A2, B2, "(б)");
    solveAndPrint(A3, B3, "(в)");

    return 0;
}

