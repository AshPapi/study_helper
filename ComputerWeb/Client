#include <fstream>
#include <iostream>
#include <string>
#include <thread>
#include <chrono>

using namespace std;

string filename = "C:\\Users\\s0188242\\source\\repos\\data.txt";  // Файл для записи данных
string logFilename = "C:\\Users\\s0188242\\source\\repos\\log.txt"; // Файл логов
string file_back = "C:\\Users\\s0188242\\source\\repos\\file_back.txt"; // Файл с ответом от сервера

// Функция ожидания обновления file_back.txt
string waitForServerResponse() {
    string lastResponse = "";
    
    while (true) {
        this_thread::sleep_for(chrono::seconds(1)); // Ожидаем 1 сек перед проверкой

        ifstream file(file_back);
        if (!file) {
            continue; // Если файл не доступен, пробуем снова
        }

        string response;
        getline(file, response, '\0'); // Читаем весь файл
        file.close();

        if (!response.empty() && response != lastResponse) {
            lastResponse = response;
            return response;
        }
    }
}

int main() {
    setlocale(LC_ALL, "rus");

    while (true) {
        cout << "\nВведите числа через пробел (или 'exit' для выхода): ";
        string input;
        getline(cin, input);

        if (input == "exit") {
            cout << "Выход..." << endl;
            break;
        }

        // Открываем файл в режиме добавления
        ofstream file(filename, ios::app);
        if (!file) {
            cout << "Ошибка открытия файла!" << endl;
            return 1;
        }
        file << input << endl; // Записываем данные
        file.close();

        // Открываем лог-файл в режиме добавления
        ofstream logFile(logFilename, ios::app);
        if (!logFile) {
            cout << "Ошибка открытия файла лога!" << endl;
            return 1;
        }
        logFile << input << endl;
        logFile.close();

        cout << "Данные записаны! Ожидание ответа от сервера..." << endl;

        // Ожидаем обновления file_back.txt и выводим ответ
        string response = waitForServerResponse();
        cout << "Ответ от сервера:\n" << response << endl;
    }

    return 0;
}