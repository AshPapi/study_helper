#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <thread>
#include <chrono>

using namespace std;

struct Student {
    string name;
    vector<int> grades;
};

int main() {
    setlocale(LC_ALL, "rus");
    string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";
    string resultFilename = "C:\\Users\\Admin\\source\\repos\\result.txt";

    while (true) {
        cout << "\nВведите имя студента (или 'exit' для выхода): ";
        string name;
        getline(cin, name);

        if (name == "exit") {
            break;
        }

        cout << "Введите оценки студента через пробел: ";
        string gradesInput;
        getline(cin, gradesInput);

        // Парсим оценки
        vector<int> grades;
        stringstream ss(gradesInput);
        string temp;
        while (ss >> temp) {
            try {
                grades.push_back(stoi(temp));
            }
            catch (...) {
                cout << "Ошибка преобразования оценки!" << endl;
                continue;
            }
        }

        if (grades.empty()) {
            cout << "Нет валидных оценок для записи!" << endl;
            continue;
        }

        // Создаем объект Student
        Student student = { name, grades };

        // Записываем в бинарный файл
        ofstream file(filename, ios::binary);
        if (!file) {
            cout << "Ошибка открытия бинарного файла!" << endl;
            continue;
        }

        // Записываем имя
        size_t nameLength = student.name.length();
        file.write(reinterpret_cast<char*>(&nameLength), sizeof(size_t));
        file.write(student.name.c_str(), nameLength);

        // Записываем оценки
        size_t gradesSize = student.grades.size();
        file.write(reinterpret_cast<char*>(&gradesSize), sizeof(size_t));
        file.write(reinterpret_cast<char*>(student.grades.data()), sizeof(int) * gradesSize);
        file.close();

        cout << "Данные отправлены на сервер. Ожидание ответа..." << endl;

        // Ждем обработки сервером
        string result;
        for (int i = 0; i < 5; i++) { // Ждем максимум 5 секунд
            this_thread::sleep_for(chrono::seconds(1));

            ifstream resultFile(resultFilename);
            if (resultFile) {
                getline(resultFile, result);
                resultFile.close();
                break;
            }
        }

        if (!result.empty()) {
            cout << result << endl;
        }
        else {
            cout << "Не удалось получить ответ от сервера!" << endl;
        }
    }

    return 0;
}
