#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <thread>
#include <chrono>

using namespace std;

// Структура для студента
struct Student {
    string name;           // Имя студента
    vector<int> grades;    // Оценки студента
};

int main() {
    setlocale(LC_ALL, "rus");

    string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";  // Бинарный файл
    string resultFile = "C:\\Users\\Admin\\source\\repos\\result.txt"; // Файл с результатом

    while (true) {
        Student student;

        // Ввод имени студента
        cout << "\nВведите имя студента (или 'exit' для выхода): ";
        getline(cin, student.name);
        if (student.name == "exit") {
            break;
        }

        // Ввод оценок студента
        cout << "Введите оценки через пробел для " << student.name << ": ";
        string input;
        getline(cin, input);

        stringstream ss(input);
        string temp;
        while (ss >> temp) {
            try {
                student.grades.push_back(stoi(temp));
            }
            catch (...) {
                cout << "Ошибка преобразования оценки!" << endl;
                continue;
            }
        }

        if (student.grades.empty()) {
            cout << "Нет валидных оценок для записи!" << endl;
            continue;
        }

        // Запись данных студента в бинарный файл
        ofstream file(filename, ios::binary | ios::app);
        if (!file) {
            cout << "Ошибка открытия бинарного файла!" << endl;
            return 1;
        }

        // Записываем длину имени и само имя
        size_t nameLength = student.name.length();
        file.write(reinterpret_cast<char*>(&nameLength), sizeof(size_t));
        file.write(student.name.c_str(), nameLength);

        // Записываем количество оценок и сами оценки
        size_t gradesSize = student.grades.size();
        file.write(reinterpret_cast<char*>(&gradesSize), sizeof(size_t));
        file.write(reinterpret_cast<char*>(student.grades.data()), sizeof(int) * gradesSize);
        file.close();

        cout << "Данные студента " << student.name << " отправлены серверу, ждём результат..." << endl;

        // Ожидаем результата от сервера
        string lastResult = "";
        while (true) {
            this_thread::sleep_for(chrono::seconds(1));

            ifstream resFile(resultFile);
            if (resFile) {
                string avg, scholarship;
                getline(resFile, avg);
                getline(resFile, scholarship);
                resFile.close();

                string currentResult = avg + "\n" + scholarship;
                if (currentResult != lastResult) {
                    cout << "Средний балл для " << student.name << ": " << avg << endl;
                    cout << "Ответ от сервера: " << scholarship << endl;
                    lastResult = currentResult;
                    remove(resultFile.c_str()); // Удаляем файл после чтения
                    break;
                }
            }
        }
    }

    return 0;
}