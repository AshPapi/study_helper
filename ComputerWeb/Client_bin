#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <thread>
#include <chrono>

using namespace std;

int main() {
    setlocale(LC_ALL, "rus");

    string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";  // Бинарный файл
    string resultFile = "C:\\Users\\Admin\\source\\repos\\result.txt"; // Файл с результатом

    while (true) {
        cout << "\nВведите числа через пробел (или 'exit' для выхода): ";
        string input;
        getline(cin, input);

        if (input == "exit") {
            break;
        }

        // Парсим введённые числа
        vector<int> numbers;
        stringstream ss(input);
        string temp;
        while (ss >> temp) {
            try {
                numbers.push_back(stoi(temp));
            }
            catch (...) {
                cout << "Ошибка преобразования числа!" << endl;
                continue;
            }
        }

        if (numbers.empty()) {
            cout << "Нет валидных чисел для записи!" << endl;
            continue;
        }

        // Открываем бинарный файл в режиме добавления
        ofstream file(filename, ios::binary | ios::app);
        if (!file) {
            cout << "Ошибка открытия бинарного файла!" << endl;
            return 1;
        }

        // Записываем размер новой порции данных и сами данные
        size_t size = numbers.size();
        file.write(reinterpret_cast<char*>(&size), sizeof(size_t));
        file.write(reinterpret_cast<char*>(numbers.data()), sizeof(int) * numbers.size());
        file.close();

        cout << "Данные отправлены серверу, ждём результат..." << endl;

        // Ожидаем нового результата от сервера
        string lastResult = ""; // Для отслеживания последнего прочитанного результата
        while (true) {
            this_thread::sleep_for(chrono::seconds(1));

            ifstream resFile(resultFile);
            if (resFile) {
                string avg, scholarship;
                getline(resFile, avg);  // Читаем средний балл
                getline(resFile, scholarship);  // Читаем сообщение о стипендии
                resFile.close();

                string currentResult = avg + "\n" + scholarship;
                if (currentResult != lastResult) { // Проверяем, новый ли результат
                    cout << "Средний балл: " << avg << endl;
                    cout << "Ответ от сервера: " << scholarship << endl;
                    lastResult = currentResult; // Обновляем последний результат
                    remove(resultFile.c_str()); // Удаляем файл после чтения
                    break;
                }
            }
        }
    }

    return 0;
}