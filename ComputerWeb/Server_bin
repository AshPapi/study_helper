#include <fstream>
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>

using namespace std;

string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";  // Путь к бинарному файлу
string resultFile = "C:\\Users\\Admin\\source\\repos\\result.txt"; // Файл для передачи результата клиенту

vector<int> readNumbersFromFile(const string& filename) {
    ifstream file(filename, ios::binary);
    vector<int> numbers;

    if (!file) {
        cout << "Ошибка открытия бинарного файла!" << endl;
        return numbers;
    }

    // Читаем все блоки данных из файла
    while (!file.eof()) {
        size_t size;
        file.read(reinterpret_cast<char*>(&size), sizeof(size_t));
        if (file.eof()) break;

        vector<int> block(size);
        file.read(reinterpret_cast<char*>(block.data()), sizeof(int) * size);
        numbers.insert(numbers.end(), block.begin(), block.end());
    }

    file.close();
    return numbers;
}

double calculateAverage(const vector<int>& numbers) {
    if (numbers.empty()) return 0.0;
    double sum = 0;
    for (int num : numbers) sum += num;
    return sum / numbers.size();
}

void writeResultToFile(double avg, const string& result) {
    ofstream resFile(resultFile);
    if (!resFile) {
        cout << "Ошибка записи в файл результата!" << endl;
        return;
    }
    resFile << avg << endl;  // Записываем средний балл
    resFile << result << endl;  // Записываем информацию о стипендии
    resFile.close();
}

int main() {
    setlocale(LC_ALL, "rus");

    cout << "Сервер запущен и следит за изменениями в файле..." << endl;

    string lastContent = ""; // Для проверки изменений в данных

    while (true) {
        this_thread::sleep_for(chrono::seconds(5));  // Проверка каждые 5 секунд

        vector<int> numbers = readNumbersFromFile(filename);
        if (numbers.empty()) {
            continue;  // Если нет данных, продолжаем ждать
        }

        // Формируем строку текущих данных для сравнения
        string currentContent;
        for (int num : numbers) currentContent += to_string(num) + " ";

        if (currentContent == lastContent) {
            continue;  // Если данные не изменились, пропускаем
        }

        cout << "\nФайл обновлён!" << endl;
        double avg = calculateAverage(numbers);
        cout << "Средний балл: " << avg << endl;

        string result;
        if (avg > 4.5) {
            result = "Студент получает стипендию!";
            cout << result << endl;
        } else {
            result = "Стипендия не положена.";
            cout << result << endl;
        }

        writeResultToFile(avg, result);
        lastContent = currentContent; // Обновляем последние обработанные данные
    }

    return 0;
}