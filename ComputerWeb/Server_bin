#include <fstream>
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>
#include <sstream>

using namespace std;

// Структура студента
struct Student {
    string name;
    vector<int> grades;
};

// Чтение данных студентов из бинарного файла
vector<Student> readStudentsFromFile(const string& filename) {
    ifstream file(filename, ios::binary);
    vector<Student> students;

    if (!file) {
        cout << "Ошибка открытия файла!" << endl;
        return students;
    }

    while (file.peek() != EOF) { // Проверка на конец файла перед чтением
        Student student;
        size_t nameLength;

        if (!file.read(reinterpret_cast<char*>(&nameLength), sizeof(size_t))) break;

        string name(nameLength, '\0');
        if (!file.read(&name[0], nameLength)) break;
        student.name = name;

        size_t gradesSize;
        if (!file.read(reinterpret_cast<char*>(&gradesSize), sizeof(size_t))) break;

        student.grades.resize(gradesSize);
        if (!file.read(reinterpret_cast<char*>(student.grades.data()), sizeof(int) * gradesSize)) break;

        students.push_back(student);
    }

    return students;
}

// Вычисление среднего балла
double calculateAverage(const vector<int>& grades) {
    if (grades.empty()) return 0.0;
    double sum = 0;
    for (int grade : grades) sum += grade;
    return sum / grades.size();
}

// Запись результата в файл
void writeResultToFile(double avg, const string& result, const string& resultFile) {
    ofstream resFile(resultFile);
    if (!resFile) {
        cout << "Ошибка записи в файл!" << endl;
        return;
    }
    resFile << avg << endl << result << endl;
}

// Преобразование числа в строку
string intToString(int num) {
    stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    setlocale(LC_ALL, "rus");

    string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";
    string resultFile = "C:\\Users\\Admin\\source\\repos\\result.txt";

    cout << "Сервер запущен..." << endl;

    string lastContent;

    while (true) {
        this_thread::sleep_for(chrono::seconds(5));

        vector<Student> students = readStudentsFromFile(filename);
        if (students.empty()) continue;

        string currentContent;
        for (const auto& student : students) {
            currentContent += student.name + ":";
            for (int grade : student.grades) {
                currentContent += intToString(grade) + " ";
            }
        }

        if (currentContent == lastContent) continue;

        const Student& lastStudent = students.back();
        cout << "\nФайл обновлён! Студент: " << lastStudent.name << endl;
        double avg = calculateAverage(lastStudent.grades);
        cout << "Средний балл: " << avg << endl;

        string result = (avg > 4.5) ? "Студент получает стипендию!" : "Стипендия не положена.";
        cout << result << endl;

        writeResultToFile(avg, result, resultFile);
        lastContent = currentContent;
    }

    return 0;
}