#include <fstream>
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>
#include <sstream>

using namespace std;

// Структура для студента
struct Student {
    string name;           // Имя студента
    vector<int> grades;    // Оценки студента
};

vector<Student> readStudentsFromFile(const string& filename) {
    ifstream file(filename, ios::binary);
    vector<Student> students;

    if (!file) {
        cout << "Ошибка открытия бинарного файла!" << endl;
        return students;
    }

    while (!file.eof()) {
        Student student;

        // Читаем длину имени и само имя
        size_t nameLength;
        file.read(reinterpret_cast<char*>(&nameLength), sizeof(size_t));
        if (file.eof()) break;

        char* nameBuffer = new char[nameLength + 1];
        file.read(nameBuffer, nameLength);
        nameBuffer[nameLength] = '\0'; // Добавляем нулевой terminator
        student.name = string(nameBuffer);
        delete[] nameBuffer;

        // Читаем количество оценок и сами оценки
        size_t gradesSize;
        file.read(reinterpret_cast<char*>(&gradesSize), sizeof(size_t));
        if (file.eof()) break;

        student.grades.resize(gradesSize);
        file.read(reinterpret_cast<char*>(student.grades.data()), sizeof(int) * gradesSize);

        students.push_back(student);
    }

    file.close();
    return students;
}

double calculateAverage(const vector<int>& grades) {
    if (grades.empty()) return 0.0;
    double sum = 0;
    for (int grade : grades) sum += grade;
    return sum / grades.size();
}

void writeResultToFile(double avg, const string& result) {
    ofstream resFile(resultFile);
    if (!resFile) {
        cout << "Ошибка записи в файл результата!" << endl;
        return;
    }
    resFile << avg << endl;
    resFile << result << endl;
    resFile.close();
}

// Преобразование числа в строку
string intToString(int num) {
    stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    setlocale(LC_ALL, "rus");

    string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";  // Путь к бинарному файлу
    string resultFile = "C:\\Users\\Admin\\source\\repos\\result.txt"; // Файл для результата

    cout << "Сервер запущен и следит за изменениями в файле..." << endl;

    string lastContent = ""; // Для проверки изменений

    while (true) {
        this_thread::sleep_for(chrono::seconds(5));

        vector<Student> students = readStudentsFromFile(filename);
        if (students.empty()) {
            continue;
        }

        // Формируем строку для сравнения изменений
        string currentContent;
        for (const auto& student : students) {
            currentContent += student.name + ":";
            for (int grade : student.grades) {
                currentContent += intToString(grade) + " ";
            }
        }

        if (currentContent == lastContent) {
            continue;
        }

        // Обрабатываем последнего студента (новые данные)
        const Student& lastStudent = students.back();
        cout << "\nФайл обновлён! Студент: " << lastStudent.name << endl;
        double avg = calculateAverage(lastStudent.grades);
        cout << "Средний балл: " << avg << endl;

        string result;
        if (avg > 4.5) {
            result = "Студент получает стипендию!";
            cout << result << endl;
        } else {
            result = "Стипендия не положена.";
            cout << result << endl;
        }

        writeResultToFile(avg, result);
        lastContent = currentContent;
    }

    return 0;
}