#include <fstream>
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>

using namespace std;

string filename = "C:\\Users\\Admin\\source\\repos\\data.bin";  // Путь к бинарному файлу
string resultFilename = "C:\\Users\\Admin\\source\\repos\\result.bin"; // Файл для результата
string lastContent = "";  // Для проверки изменений

vector<int> readNumbersFromFile(const string& filename) {
    ifstream file(filename, ios::binary);
    vector<int> numbers;

    if (!file) {
        cout << "Файла нет или ошибка открытия бинарного файла!" << endl;
        return numbers;
    }

    // Читаем размер вектора
    size_t size;
    file.read(reinterpret_cast<char*>(&size), sizeof(size_t));
    if (file.eof() || size == 0) {
        file.close();
        return numbers;  // Если файл пуст или ошибка, возвращаем пустой вектор
    }

    // Выделяем память и читаем числа
    numbers.resize(size);
    file.read(reinterpret_cast<char*>(numbers.data()), sizeof(int) * size);
    file.close();

    return numbers;
}

// Считаем среднее
double calculateAverage(const vector<int>& numbers) {
    if (numbers.empty()) return 0.0;
    double sum = 0;
    for (int num : numbers) sum += num;
    return sum / numbers.size();
}

int main() {
    setlocale(LC_ALL, "rus");

    cout << "Сервер запущен и следит за изменением файла..." << endl;

    while (true) {
        this_thread::sleep_for(chrono::seconds(5)); // Пауза перед следующей проверкой

        vector<int> numbers = readNumbersFromFile(filename);
        if (numbers.empty()) {
            continue;  // Если нет данных, продолжаем ждать
        }

        string currentContent;
        for (int num : numbers) currentContent += to_string(num) + " ";
        if (currentContent == lastContent) {
            continue;  // Если данные не изменились, пропускаем
        }

        cout << "\nФайл обновлён!" << endl;
        double avg = calculateAverage(numbers);
        bool hasScholarship = avg > 4.5;

        // Записываем результат в файл result.bin
        ofstream resultFile(resultFilename, ios::binary);
        if (!resultFile) {
            cout << "Ошибка создания файла результата!" << endl;
            continue;
        }
        resultFile.write(reinterpret_cast<char*>(&avg), sizeof(double));
        resultFile.write(reinterpret_cast<char*>(&hasScholarship), sizeof(bool));
        resultFile.close();

        cout << "Средний балл: " << avg << endl;
        if (hasScholarship) {
            cout << "Студент получает стипендию!" << endl;
        }
        else {
            cout << "Стипендия не положена." << endl;
        }

        lastContent = currentContent; // Обновляем последние данные
    }

    return 0;
}