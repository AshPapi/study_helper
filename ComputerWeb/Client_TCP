#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#pragma comment(lib, "ws2_32.lib")
using namespace std;

int main() {
    setlocale(LC_ALL, "rus");  
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);  // Инициализация Winsock

    // Создание сокета для подключения к серверу
    SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) {
        cerr << "Ошибка создания сокета" << endl;
        WSACleanup();
        return 1;
    }

    sockaddr_in serverAddr{};  // Структура для хранения информации о сервере
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345);  // Порт для подключения

    // Преобразование IP-адреса в формат, пригодный для сокета
    if (inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr) <= 0) {
        cerr << "Ошибка преобразования IP-адреса" << endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    // Подключение к серверу
    if (connect(sock, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        cerr << "Ошибка подключения к серверу" << endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    while (true) {
        string name, group;
        int height, weight;
        vector<int> grades;

        cout << "Введите имя (или 'exit' для выхода): ";
        getline(cin, name);
        if (name == "exit") break; 

        cout << "Введите группу: ";
        getline(cin, group);

        cout << "Введите рост (см): ";
        cin >> height;

        cout << "Введите вес (кг): ";
        cin >> weight;

        cout << "Введите оценки через пробел: ";
        string gradesInput;
        cin.ignore();  // Очищаем буфер перед считыванием строки
        getline(cin, gradesInput);

        // Разбиение строки с оценками на отдельные числа
        stringstream ss(gradesInput);
        int grade;
        while (ss >> grade) {
            grades.push_back(grade);  // Добавляем каждую оценку в вектор
        }

        // Формирование строки для отправки на сервер
        stringstream dataStream;
        dataStream << name << " " << group << " " << height << " " << weight;
        for (int g : grades) {
            dataStream << " " << g;  // Добавляем все оценки в строку
        }

        string data = dataStream.str();  // Преобразуем данные в строку
        send(sock, data.c_str(), data.size(), 0);  // Отправляем данные на сервер

        char buffer[1024] = { 0 };  // Буфер для получения ответа от сервера
        recv(sock, buffer, 1024, 0);  // Получаем ответ от сервера
        cout << endl << "Ответ от сервера: " << endl << buffer << endl << endl;
    }

    // Закрытие соединения и завершение работы Winsock
    closesocket(sock);
    WSACleanup();
    return 0;
}
