#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>
#include <string>

#pragma comment(lib, "ws2_32.lib") 

int main() {
    setlocale(LC_ALL, "rus"); 

    // 1. Инициализация Winsock
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "Ошибка инициализации Winsock!" << std::endl;
        return 1;
    }

    // 2. Создание сокета для UDP
    SOCKET serverSocket = socket(AF_INET, SOCK_DGRAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        std::cerr << "Ошибка создания сокета!" << std::endl;
        WSACleanup();
        return 1;
    }

    // 3. Настройка адреса сервера
    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345); // Порт 12345
    serverAddr.sin_addr.s_addr = INADDR_ANY; // Принимать с любого интерфейса

    // Привязка сокета
    if (bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Ошибка привязки сокета!" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    std::cout << "Сервер запущен и ожидает сообщений..." << std::endl;

    // 6. Бесконечный цикл обработки сообщений
    while (true) {
        char buffer[1024]; // Буфер для данных
        sockaddr_in clientAddr; // Адрес клиента
        int clientAddrSize = sizeof(clientAddr);

        // 4. Получение данных от клиента
        int bytesReceived = recvfrom(serverSocket, buffer, 1024, 0, (sockaddr*)&clientAddr, &clientAddrSize);
        if (bytesReceived == SOCKET_ERROR) {
            std::cerr << "Ошибка получения данных!" << std::endl;
            continue;
        }

        // Выводим полученное сообщение
        std::string message(buffer, bytesReceived);
        std::cout << "Получено сообщение: " << message << std::endl;

        // 5. Отправка эхо-ответа клиенту
        sendto(serverSocket, buffer, bytesReceived, 0, (sockaddr*)&clientAddr, clientAddrSize);
        std::cout << "Эхо-ответ отправлен клиенту." << std::endl;
    }

    // 7. Завершение работы (в примере не вызывается, так как цикл бесконечный)
    closesocket(serverSocket);
    WSACleanup();
    return 0;
}
