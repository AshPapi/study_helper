#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>

#pragma comment(lib, "ws2_32.lib")

using namespace std;

struct Student {
    string name;
    string group;
    int height;
    int weight;
    vector<int> grades;
};

double calculateBMI(int height, int weight) {
    double heightMeters = height / 100.0;
    return weight / (heightMeters * heightMeters);
}

double calculateAverage(const vector<int>& grades) {
    if (grades.empty()) return 0.0;
    double sum = 0;
    for (int grade : grades) sum += grade;
    return sum / grades.size();
}

int main() {
    setlocale(LC_ALL, "rus");
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    SOCKET serverSock = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSock == INVALID_SOCKET) {
        cerr << "Ошибка создания сокета" << endl;
        WSACleanup();
        return 1;
    }

    sockaddr_in serverAddr{};
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(serverSock, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        cerr << "Ошибка привязки сокета" << endl;
        closesocket(serverSock);
        WSACleanup();
        return 1;
    }

    if (listen(serverSock, 5) == SOCKET_ERROR) {
        cerr << "Ошибка прослушивания порта" << endl;
        closesocket(serverSock);
        WSACleanup();
        return 1;
    }

    cout << "Сервер запущен, ожидает подключения..." << endl;

    while (true) {
        sockaddr_in clientAddr;
        int clientSize = sizeof(clientAddr);
        SOCKET clientSock = accept(serverSock, (sockaddr*)&clientAddr, &clientSize);

        if (clientSock == INVALID_SOCKET) {
            cerr << "Ошибка принятия подключения" << endl;
            continue;
        }

        cout << "Клиент подключен! Пока он работает, другие клиенты ждут." << endl;

        while (true) {
            char buffer[1024] = {0};
            int bytesReceived = recv(clientSock, buffer, 1024, 0);
            if (bytesReceived <= 0) {
                cout << "Клиент отключился. Ожидание нового клиента..." << endl;
                break;
            }

            stringstream dataStream(buffer);
            Student student;
            dataStream >> student.name >> student.group >> student.height >> student.weight;
            int grade;
            while (dataStream >> grade) {
                student.grades.push_back(grade);
            }

            cout << "\nПолучены данные:\n";
            cout << "Имя: " << student.name << "\n";
            cout << "Группа: " << student.group << "\n";
            cout << "Рост: " << student.height << " см\n";
            cout << "Вес: " << student.weight << " кг\n";
            cout << "Оценки: ";
            for (int g : student.grades) cout << g << " ";
            cout << "\n";

            double bmi = calculateBMI(student.height, student.weight);
            double avg = calculateAverage(student.grades);
            stringstream result;
            result << "Имя: " << student.name << "\n";
            result << "Группа: " << student.group << "\n";
            result << "Рост: " << student.height << " см\n";
            result << "Вес: " << student.weight << " кг\n";
            result << "Средний балл: " << avg << "\n";
            result << "ИМТ: " << bmi << "\n";
            result << (avg > 4.5 ? "Стипендия назначена!" : "Стипендия не положена.");

            cout << "Рассчитано:\n" << result.str() << endl;

            send(clientSock, result.str().c_str(), result.str().size(), 0);
        }

        closesocket(clientSock);
    }

    closesocket(serverSock);
    WSACleanup();
    return 0;
}
